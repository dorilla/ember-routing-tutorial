{"name":"Ember-routing-tutorial","tagline":"Tutorial for Ember.js Nested Routing","body":"# Ember.js Nested Routing with Multiple Outlets\r\n\r\n### Introduction\r\n\r\nStarting out with Ember.js is a lot like starting out with Rails -- there is a plethora of ways to achieve one thing. This is a good thing and a bad thing. It's good that the framework is flexible enough to support multiple and solid ways of implementing a feature, however, with a large team, a convention needs to be established for maintanability and overall sane-ness. So why not stick with the framework's conventions? \r\n\r\nWith Ember.js (and more specifically, Ember CLI), we are given a solid, well thought-out set of conventions. In this article I'll walk through Ember.js routing -- specifically nested routing with multiple outlets on the same page.\r\n\r\nA quick demo before we start: [Demo](http://)\r\n\r\n###### Technologies Used\r\n- Ember.js -- v. 1.10.0-beta.2 (HTMLbars!!!)\r\n- Ember Data -- v. 1.0.0-beta.14\r\n- Ember CLI -- v. 0.1.5\r\n\r\n### Setup\r\n\r\nTo get our environment setup, we should initially have Node.js installed to install our various dependencies.\r\n\r\nOn a Mac with Homebrew installed, it's as simple as\r\n\r\n`brew install node`\r\n\r\nNow install Ember-CLI\r\n\r\n`npm install -g ember-cli`\r\n\r\nNext, we'll install Bower -- Ember-CLI uses it as its package manager\r\n\r\n`npm install -g bower`\r\n\r\n### Getting Started\r\n\r\nNow that we have our environment set up, change your current directory to where you'll be storing your files. I like to keep a folder called `Dev` in my home directory\r\n\r\n`cd ~/Dev`\r\n\r\nNow intialize a new Ember CLI app\r\n\r\n`ember new your-app-name`\r\n\r\n`cd your-app-name`\r\n\r\nAt this point you can now simply run\r\n\r\n`ember server`\r\n\r\nto start a new server located at [http://localhost:4200/](http://localhost:4200)\r\n\r\n```Insert screenshot 1```\r\n\r\nSource up to this point: [https://github.com/dorilla/ember-routing-tutorial/releases/tag/start-here](https://github.com/dorilla/ember-routing-tutorial/releases/tag/start-here)\r\n\r\n##### Some More Setup\r\n\r\nNow we have to setup our app to receive data from some external API source. We are going to use Fixtures as a way to fake data coming from an API. You can read more about Fixtures [here](http://emberjs.com/guides/models/the-fixture-adapter/).\r\n\r\nCreate a folder named `adapters` in the `/app` directory. Then create a file named `application.js` with the following contents\r\n\r\n```javascript\r\nimport DS from 'ember-data';\r\n\r\nexport default DS.FixtureAdapter.extend({\r\n  // Adds a fake latency timer to see realistic transitions between routes (time between AJAX requests)\r\n  latency: 500\r\n});\r\n```\r\n\r\nThis file tells Ember Data to use the FixtureAdapter to resolve interactions with the API.\r\n\r\nThe CSS we will be using in this app\r\n\r\n\r\n```css\r\n// more in Git source\r\n\r\n.master {\r\n  float: left;\r\n  width: 30%;\r\n  font-size: 20pt;\r\n}\r\n\r\n.master a {\r\n  display: block;\r\n  text-decoration: none;\r\n}\r\n\r\n.master a:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n.master a.active::before {\r\n  content: \" Â» \";\r\n}\r\n\r\n.detail {\r\n  float: left;\r\n  width: 70%;\r\n  font-size: 14pt;\r\n}\r\n```\r\n\r\n### Meat and Potatoes\r\n\r\nOur app will have one model: **Users**. Let's now define this model in our app.\r\n\r\nCreate a file `/app/models/user.js`\r\n\r\n```javascript\r\nimport DS from \"ember-data\";\r\n\r\n// define the User model\r\nvar User = DS.Model.extend({\r\n  firstName:  DS.attr('string'),\r\n  lastName:   DS.attr('string'),\r\n  bio:        DS.attr('string')\r\n});\r\n\r\n// create User fixtures\r\n// this is what the FixtureAdapter uses as the API source\r\nUser.reopenClass({\r\n  FIXTURES: [\r\n    {id: 1, firstName: 'Steve', lastName: 'Jobs', bio: \"Jobs' Bio here\"},\r\n    {id: 2, firstName: 'Jony', lastName: 'Ive', bio: \"Ive's Bio Here\"}\r\n  ]\r\n});\r\n\r\nexport default User;\r\n```\r\n\r\nOur **final** page structure will look like this\r\n\r\n```\r\n-----------------------------------------------------\r\n|  Users  |           User Show Route               |\r\n|  Index  |                                         |\r\n|  Route  |                                         |\r\n|         |                                         |\r\n|         |                                         |\r\n|         |                                         |\r\n|         |                                         |\r\n-----------------------------------------------------\r\n```\r\n\r\nA typical *Master-Detail* page.\r\n\r\nThe Index Route will list out all the Users and the User Show Route will show a more detailed view of a single user.\r\n\r\nWe will first work on the Users Index Route\r\n\r\n##### Users Index Route\r\n\r\nIn `/app/router.js`, add a new route\r\n\r\n\r\n```javascript\r\n...\r\n\r\nRouter.map(function() {\r\n  this.route('users', function() {});\r\n});\r\n\r\n...\r\n```\r\n\r\nYou can read more about routing [here](http://), but the most important thing you must realize is that this creates a path `/users`. Ember CLI then expects a UsersTemplate to be created in order to resolve (a UsersController and a UsersRoute are optional -- it is implicitly created). \r\n\r\nSo create the UsersTemplate `/app/templates/users.hbs`\r\n\r\n\r\n```html\r\n<h1>Users</h1>\r\n<h5>View users in detail</h5>\r\n\r\n<hr>\r\n{{outlet}}\r\n```\r\n\r\nEverything nested under the `/users` route will be rendered into the `outlet`.\r\n\r\nNow we will create the UsersIndexRoute, which will display the list of users.\r\n\r\nWe will override the Route method `model` to make the AJAX call to grab users. Create a new directory `/app/routes/users` and a new file under it `/app/routes/users/index.js`\r\n\r\n\r\n```javascript\r\nimport Ember from 'ember';\r\n\r\nexport default Ember.Route.extend({\r\n\r\n  model: function() {\r\n    // use Ember Data to make an AJAX call to grab users\r\n    return this.store.find('user');\r\n  },\r\n\r\n});\r\n```\r\n\r\nNow that we have the users, we can now display them in the template `/app/templates/users/index.hbs`\r\n\r\n\r\n```html\r\n{{#each model}}\r\n  <div>{{firstName}} {{lastName}}</div>\r\n{{/each}}\r\n```\r\n\r\nOpen [http://localhost:4200/users](http://localhost:4200/users) in your browser and you should see something like this\r\n```screenshot 2```\r\n\r\nIn preparation of multiple outlets, we will make a modification to how the UsersIndexRoute renders.\r\n\r\nModify `/app/templates/users.hbs`\r\n\r\n\r\n```html\r\n<h1>Users</h1>\r\n<h5>View users in detail</h5>\r\n\r\n<hr>\r\n\r\n<div class=\"master\">\r\n  <div class=\"inner\">{{outlet 'master'}}</div>\r\n</div>\r\n\r\n<div class=\"detail\">\r\n  <div class=\"inner\">{{outlet 'detail'}}</div>\r\n</div>\r\n```\r\n\r\nAs you can see we are adding the master-detail layout here. We are now going to name the existing outlet `master`\r\n\r\nNow modify `/app/routes/users/index.js` to render the template into the new named route\r\n\r\n```javascript\r\n...\r\n\r\n  renderTemplate: function() {\r\n    this.render({\r\n      outlet: 'master',\r\n    });\r\n  },\r\n\r\n...\r\n```\r\n\r\n\r\nNot much to look at yet -- just a master list of users. Now we will add the UsersShowRoute and add links to the list that direct to the respective users.\r\n\r\n##### Users Show Route\r\n\r\nFirst we will update `/app/router.js`\r\n\r\n```javascript\r\n...\r\n\r\nRouter.map(function() {\r\n  this.route('users', function() {\r\n    this.route('index', { path: ''}, function() {\r\n      this.route('show', { path: ':id' });\r\n    });\r\n  });\r\n});\r\n\r\n...\r\n```\r\n\r\nThis nests /users/:id under the index Route. This ensures that the master list will always show as we move between show routes.\r\n\r\nNext up is creating the UsersShowRoute `/app/routes/users/index/show.js`\r\n\r\n```javascript\r\nimport Ember from 'ember';\r\n\r\nexport default Ember.Route.extend({\r\n\r\n  renderTemplate: function() {\r\n    this.render({\r\n      outlet: 'detail',\r\n    });\r\n  },\r\n\r\n  model: function(params) {\r\n    // using `fetch` instead of the usual `find` method\r\n    // to always make a call to the API\r\n    // regardless of the current store\r\n    return this.store.fetch('user', params.id);\r\n  },\r\n\r\n});\r\n```\r\n\r\nThen we create the template `/app/templates/users/index/show.hbs`\r\n\r\n```html\r\n<strong>{{firstName}} {{lastName}}</strong>\r\n<hr>\r\n{{bio}}\r\n```\r\n\r\nNow create the links to the show pages in the master list. Replace contents of the file `/app/templates/users/index.hbs`\r\n\r\n```html\r\n{{#each model}}\r\n  {{#link-to 'users.index.show' this.id}}{{firstName}} {{lastName}}{{/link-to}}\r\n{{/each}}\r\n```\r\n\r\nAt this point we can seamlessly move between nested show routes. This is how it should look\r\n\r\n```scrnshot 3```\r\n\r\nReload the page on a show route and the master list will be loaded along side the detail view. Increase the `FixtureAdapter` latency to see the transitions clearly.\r\n\r\n### Conclusion\r\n\r\nAnd that's it! We have completed the tutorial. As you can see in this very simplified example, it takes very little lines of code to achieve a Master-Detail implementation when one follows Ember's conventions.\r\n\r\n### Bonus\r\n\r\n##### Loading substates\r\n\r\nLearn more about Loading Substates here  [here](http://emberjs.com/guides/routing/loading-and-error-substates/) \r\n\r\nWe will utilize Loading Substates to better visualize the transitions between routes. Right now, since we have set a latency to our API requests, we can see a slight delay in the rendering. It would be better as a user to see a loading substate in place of any other content. Ember gives us a pretty solid convention for this. We simply need to define the routes for both the index route and the show route to tell Ember to use our named outlets.\r\n\r\nFirst create the loading template `/app/templates/loading.hbs`\r\n\r\n```html\r\nLoading...\r\n```\r\n\r\nCreate `/app/routes/users/loading.js`\r\n\r\n```javascript\r\nimport Ember from 'ember';\r\n\r\nexport default Ember.Route.extend({\r\n\r\n  renderTemplate: function() {\r\n    this.render('loading', { // the loading template\r\n      outlet: 'master',      // place into the 'master' outlet\r\n    });\r\n  }\r\n\r\n});\r\n```\r\n\r\nCreate `/app/routes/users/index/loading.js`\r\n\r\n```javascript\r\nimport Ember from 'ember';\r\n\r\nexport default Ember.Route.extend({\r\n\r\n  renderTemplate: function() {\r\n    this.render('loading', { // the loading template\r\n      outlet: 'detail',      // place into the 'detail' outlet\r\n    });\r\n  }\r\n\r\n});\r\n```\r\n\r\n# Notes and Acknowledgements\r\n\r\n- This is very similar to how Ember101 implements the master-detail page [here](http://ember101.com/videos/007-nested-routes). However, I found that this didn't quite get it to where I wanted it to be. I wanted two outlets (a master and a detail) that contain separate loading substates. In this way, we do not have to wait for the index (master) list to resolve before rendering anything on the page.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}